#version 460 core

layout (location = 0) in vec3 aPos;
layout (location = 1) in vec2 aTexCoords;
layout (location = 2) in vec3 aNormals;
layout (location = 3) in vec3 aTangent;
layout (location = 4) in vec3 aBitangent;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform mat4 normalMat;

uniform vec3 LightPos;
uniform vec3 LightColor;
uniform vec3 camPos;

out vec2 texCoords;
out vec3 Normals;
out vec3 FragPos;

out vec3 light_Pos;
out vec3 light_Color;
out vec3 cam_Pos;

void main()
{
      gl_Position = projection * view * model * vec4(aPos, 1.0);
      texCoords = aTexCoords;
      Normals = mat3(normalMat) * aNormals;
      light_Color = LightColor;

      vec3 T = normalize(vec3(normalMat * vec4(aTangent,   0.0)));
      vec3 N = normalize(vec3(normalMat * vec4(aNormals,    0.0)));

      T = normalize(T - dot(T, N) * N);
      vec3 B = cross(T, N);
      mat3 TBN = transpose(mat3(T, B, N));

       light_Pos = TBN * LightPos;
       cam_Pos = TBN * camPos;
       FragPos = TBN * vec3(model * vec4(aPos, 1.0));
}
#version 460 core

const float PI = 3.14159265359;

out vec4 FragColor;

in vec2 texCoords;
in vec3 Normals;
in vec3 FragPos;

in vec3 light_Pos;
in vec3 light_Color;
in vec3 cam_Pos;

uniform sampler2D container;
uniform sampler2D container_s;
uniform sampler2D container_n;

vec3 objectColor = texture(container, texCoords).xyz;
vec3 objectSpecular = texture(container_s, texCoords).xyz;
vec3 objectNormal = texture(container_n, texCoords).xyz;

float DistributionGGX(vec3 N, vec3 H, float roughness);
float GeometrySchlickGGX(float NdotV, float roughness);
float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness);
vec3 fresnelSchlick(float cosTheta, vec3 F0);

void main()
{
      vec3 albedo = pow(objectColor, vec3(2.2));
      float metallic = 0.5;
      float roughness = 0.5;
      float ao = 0.01f;

      vec3 N = normalize(Normals);
      //vec3 N = normalize(objectNormal * 2.0 -1.0);
      vec3 V = normalize(cam_Pos - FragPos);

     vec3 F0 = vec3(0.04); 
     F0 = mix(F0, albedo, metallic);

      vec3 lightOut = vec3(0.0);

        vec3 L = normalize(light_Pos - FragPos);
        vec3 H = normalize(V + L);

        float distance    = length(light_Pos - FragPos);
        float attenuation = 1.0 / (distance * distance);
        vec3 radiance     = light_Color * attenuation;        

        float NDF = DistributionGGX(N, H, roughness);        
        float G   = GeometrySmith(N, V, L, roughness);      
        vec3 F    = fresnelSchlick(max(dot(H, V), 0.0), F0);       

        vec3 kS = F;
        vec3 kD = vec3(1.0) - kS;
        kD *= 1.0 - metallic;     

        vec3 nominator    = NDF * G * F;
        float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.001; 
        vec3 specular     = nominator / denominator;

        float NdotL = max(dot(N, L), 0.0);                
        lightOut += (kD * albedo / PI + specular) * radiance * NdotL;

        vec3 ambient = vec3(0.03) * albedo * ao;

       vec3 result = ambient + lightOut;

//HDR
       result = vec3(1.0) - exp(-result * 1.0);
//Gamma
       result = pow(result, vec3(1 / 2.2));
       FragColor = vec4(result, 1.0);         
}

// ----------------------------------------------------------------------------
float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    float a = roughness*roughness;
    float a2 = a*a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;

    float nom   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return nom / denom;
}
// ----------------------------------------------------------------------------
float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float nom   = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return nom / denom;
}
// ----------------------------------------------------------------------------
float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2 = GeometrySchlickGGX(NdotV, roughness);
    float ggx1 = GeometrySchlickGGX(NdotL, roughness);

    return ggx1 * ggx2;
}
// ----------------------------------------------------------------------------
vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}
// ----------------------------------------------------------------------------
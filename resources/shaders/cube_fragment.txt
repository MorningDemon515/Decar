#version 460 core

out vec4 FragColor;

in vec2 texCoords;
in vec3 Normals;
in vec3 FragPos;

in vec3 light_Pos;
in vec3 light_Color;
in vec3 cam_Pos;

uniform sampler2D container;
uniform sampler2D container_s;
uniform sampler2D container_n;

vec3 objectColor = texture(container, texCoords).xyz;
vec3 objectSpecular = texture(container_s, texCoords).xyz;
vec3 objectNormal = texture(container_n, texCoords).xyz;

void main()
{
      vec3 ambient = 0.001 * light_Color * objectColor;

      vec3 norm = normalize(Normals);
      //vec3 norm = normalize(objectNormal * 2.0 - 1.0);
 
      vec3 LightDir = normalize(light_Pos - FragPos);

      float diff = max(dot(norm, LightDir), 0.0);
      vec3 diffuse = diff * light_Color * objectColor;

      vec3 camDir = normalize(cam_Pos - FragPos);
      vec3 halfWayDir = normalize(LightDir + camDir);
      float spec = pow(max(dot(norm, halfWayDir), 0.0), 32.0f);
      vec3 specular = spec * light_Color * objectSpecular;

       vec3 result = ambient + diffuse + specular;

//HDR
       result = vec3(1.0) - exp(-result * 1.0);
//Gamma
       result = pow(result, vec3(1 / 2.2));
       FragColor = vec4(result, 1.0);         
}